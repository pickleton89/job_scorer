name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/unit/ \
          --cov=scoring.scoring_v2 \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=80 \
          -v

    - name: Run integration tests
      run: |
        python tests/test_runner.py

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.13'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy

    - name: Run ruff linting
      run: ruff check .

    - name: Run ruff formatting check
      run: ruff format --check .

    - name: Run mypy type checking
      run: mypy scoring/ --ignore-missing-imports
      continue-on-error: true  # Allow mypy to fail for now

  test-examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-examples-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-examples-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test CLI with example data
      run: |
        # Test with v2 format
        python -m scoring.scoring_v2 tests/data/v2/basic_test.csv
        
        # Test help and version
        python -m scoring.scoring_v2 --help
        python -m scoring.scoring_v2 --version

    - name: Verify package installation
      run: |
        python -c "from scoring.scoring_v2 import main, compute_scores, load_matrix; print('âœ… All imports successful')"
