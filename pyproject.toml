[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "job-scorer"
version = "3.0.1"
description = "A sophisticated job fit scoring system with emphasis detection and core gap analysis"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jeff Kiefer", email = "jeff@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business",
    "Topic :: Utilities",
]
requires-python = ">=3.10"
dependencies = [
    "pandas>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pandas-stubs>=2.0.0",  # For pandas type stubs
    "types-python-dateutil>=2.8.0",  # For dateutil type stubs
    "types-pyyaml>=6.0.0",  # For PyYAML type stubs
]

[project.entry-points]
"pytest11" = {"pytest-job-scorer" = "pytest_job_scorer.plugin"}

[project.scripts]
job-scorer = "scoring.scoring_v2:main"

[project.urls]
Homepage = "https://github.com/jeffkiefer/job_scorer"
Repository = "https://github.com/jeffkiefer/job_scorer"
Issues = "https://github.com/jeffkiefer/job_scorer/issues"

[tool.setuptools.packages.find]
include = ["scoring*"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["scoring"]
branch = true
omit = [
    "tests/*",
    "*/tests/*",
    "setup.py",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 1

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_any_unimported = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["E501"]
"data/*" = ["E501"]

[dependency-groups]
dev = [
    "ty>=0.0.1a14",
]


